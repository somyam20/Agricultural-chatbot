import streamlit as st
import faiss
import numpy as np
from sentence_transformers import SentenceTransformer
import fitz  # PyMuPDF
import requests
import os
import pickle

# ---------------------- Configuration ---------------------- #
groq_api_key = "YOUR_GROQ_API_KEY"  # Replace with your actual API key
groq_api_url = "https://api.groq.com/openai/v1/chat/completions"
model_name = "mixtral-8x7b-32768"

# ------------------ Initialize Embedding Model ------------------ #
embed_model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')

# ------------------ Text Extraction ------------------ #
def extract_text_from_pdf(pdf_data):
    doc = fitz.open(stream=pdf_data, filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    return text

# ------------------ Chunking ------------------ #
def chunk_text(text, max_len=500):
    sentences = text.split('. ')
    chunks = []
    current = ""
    for s in sentences:
        if len(current) + len(s) < max_len:
            current += s + '. '
        else:
            chunks.append(current.strip())
            current = s + '. '
    if current:
        chunks.append(current.strip())
    return chunks

# ------------------ FAISS Index ------------------ #
def build_faiss_index(chunks):
    vectors = embed_model.encode(chunks)
    dim = vectors.shape[1]
    index = faiss.IndexFlatL2(dim)
    index.add(np.array(vectors).astype('float32'))
    return index

# ------------------ Save/Load Index and Chunks ------------------ #
def save_knowledge(index, chunks, folder_path):
    faiss.write_index(index, os.path.join(folder_path, "faiss_index.idx"))
    with open(os.path.join(folder_path, "chunks.pkl"), "wb") as f:
        pickle.dump(chunks, f)

def load_knowledge(folder_path):
    index = faiss.read_index(os.path.join(folder_path, "faiss_index.idx"))
    with open(os.path.join(folder_path, "chunks.pkl"), "rb") as f:
        chunks = pickle.load(f)
    return index, chunks

# ------------------ Context Retrieval ------------------ #
@st.cache_data(show_spinner=False)
def retrieve_context(query, index, chunks, top_k=5):
    q_vec = embed_model.encode([query])
    D, I = index.search(np.array(q_vec).astype('float32'), top_k)
    return [chunks[i] for i in I[0]]

# ------------------ Ask Groq API ------------------ #
def ask_groq(question, context, history):
    conversation = []
    for q, a in history:
        conversation.append({"role": "user", "content": q})
        conversation.append({"role": "assistant", "content": a})
    prompt = f"Use the context below to answer the question.\n\nContext:\n{context}\n\nQuestion:\n{question}\n\nAnswer:"
    conversation.append({"role": "user", "content": prompt})

    headers = {
        "Authorization": f"Bearer {groq_api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": model_name,
        "messages": conversation,
        "temperature": 0.7,
        "max_tokens": 500
    }

    response = requests.post(groq_api_url, headers=headers, json=data)

    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content'].strip()
    else:
        return "Sorry, I am unable to answer at the moment."

# ------------------ Load PDFs from Folder ------------------ #
def load_pdfs_from_folder(folder_path):
    pdf_files = []
    for filename in os.listdir(folder_path):
        if filename.endswith(".pdf"):
            full_path = os.path.join(folder_path, filename)
            with open(full_path, "rb") as f:
                pdf_files.append(f.read())
    return pdf_files

# ------------------ Streamlit UI ------------------ #
st.set_page_config(page_title="Agri Advice Chatbot", page_icon="ðŸŒ¾")
st.title("Agricultural Advice Chatbot")

if "knowledge_chunks" not in st.session_state:
    st.session_state.knowledge_chunks = []
    st.session_state.knowledge_index = None
    st.session_state.chat_history = []

pdf_folder = st.text_input("Enter path to folder containing agricultural PDFs:", value="path/to/your/pdfs")

# --------- Optimization: Load from saved index if available --------- #
if pdf_folder and os.path.isdir(pdf_folder):
    idx_path = os.path.join(pdf_folder, "faiss_index.idx")
    chunk_path = os.path.join(pdf_folder, "chunks.pkl")
    
    if os.path.exists(idx_path) and os.path.exists(chunk_path):
        index, chunks = load_knowledge(pdf_folder)
        st.session_state.knowledge_index = index
        st.session_state.knowledge_chunks = chunks
        st.success("Loaded existing knowledge base.")
    else:
        with st.spinner(f"Processing PDFs from {pdf_folder}..."):
            pdf_binary_list = load_pdfs_from_folder(pdf_folder)
            all_text = ""
            for pdf_data in pdf_binary_list:
                all_text += extract_text_from_pdf(pdf_data) + "\n\n"
            chunks = chunk_text(all_text)
            index = build_faiss_index(chunks)
            save_knowledge(index, chunks, pdf_folder)
            st.session_state.knowledge_index = index
            st.session_state.knowledge_chunks = chunks
        st.success(f"Knowledge base created from {len(pdf_binary_list)} PDFs with {len(chunks)} chunks!")
else:
    st.info("Please provide a valid folder path containing PDF files.")

# Question input
query = st.text_input("Enter your agricultural question:")

if query:
    if st.session_state.knowledge_index is None or len(st.session_state.knowledge_chunks) == 0:
        st.warning("Please provide a valid folder path with at least one PDF.")
    else:
        with st.spinner("Searching for relevant context and generating answer..."):
            context_chunks = retrieve_context(query, st.session_state.knowledge_index, st.session_state.knowledge_chunks)
            context = "\n".join(context_chunks)
            answer = ask_groq(query, context, st.session_state.chat_history)
            st.session_state.chat_history.append((query, answer))
            st.markdown("### Answer:")
            st.write(answer)

            with st.expander("Show Context"):
                st.write(context)